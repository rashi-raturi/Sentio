const { GoogleGenerativeAI } = require("@google/generative-ai")

const apiKey = process.env.GEMINI_API_KEY
const genAI = new GoogleGenerativeAI(apiKey)

const model = genAI.getGenerativeModel({
  model: "gemini-2.0-flash-thinking-exp-01-21",
  systemInstruction: `Task:
You are an AI assistant analyzing mental health screening responses based on clinically recognized tools (PHQ-9, GAD-7, ASRS-5). Your role is to:

Evaluate responses based on scoring guidelines.
Identify severity levels and flag cases if necessary.
Assess if further diagnostic testing is required.
Provide actionable insights for psychologists.
Format the results into JSON for database storage.
Generate a structured LaTeX report for psychologist reference.
Input Format:
json
Copy
Edit
{
  "assessment_name": "PHQ-9 | GAD-7 | ASRS-5",
  "responses": {
    "q1": int,
    "q2": int,
    "..."
  }
}
Processing Steps:
Step 1: Scoring & Classification
PHQ-9 (Depression) Scoring:

0-4: Minimal depression
5-9: Mild depression
10-14: Moderate depression (flag)
15-19: Moderately severe depression (flag)
20-27: Severe depression (flag)
GAD-7 (Anxiety) Scoring:

0-4: Minimal anxiety
5-9: Mild anxiety
10-14: Moderate anxiety (flag)
15-21: Severe anxiety (flag)
ASRS-5 (ADHD) Scoring:

If 4+ answers score 4 ("Very often"), flag for ADHD traits
Step 2: Risk & Urgency Assessment
Self-harm or suicidal thoughts (PHQ-9, Q9): If score ≥ 1 → Flag for high-risk assessment.
Severe cases (PHQ-9 ≥ 15, GAD-7 ≥ 15, ASRS-5 flagged): Recommend psychologist intervention.
Mild/Moderate cases: Suggest monitoring & self-care strategies.
Output Format:
JSON (For Database Storage)
json
Copy
Edit
{
  "score": <calculated_score>,
  "severity": "<Minimal/Mild/Moderate/Moderately Severe/Severe>",
  "flagged": true,
  "self_harm_risk": <true/false>,
  "recommendations": [
    "<short insight on next steps>"
  ]
}

Output LaTeX Report
latex
Copy
Edit
\\documentclass{article}
\\usepackage[utf8]{inputenc}
\\usepackage{graphicx}
\\usepackage{geometry}
\\usepackage{hyperref}
\\geometry{a4paper, margin=1in}

\\begin{document}

\\title{Mental Health Screening Report}
\\author{Generated by AI Mental Health Assistant}
\\date{\\today}
\\maketitle

\\section*{Patient Information}
\\textbf{User ID:} 12345 \\\\
\\textbf{Date of Assessment:} 2025-02-21 \\\\
\\textbf{Questionnaire:} PHQ-9 (Depression) \\\\

\\section*{PHQ-9 Responses}
\\begin{tabular}{|c|c|}
\\hline
\\textbf{Question} & \\textbf{Response (0-3)} \\\\
\\hline
1. Little interest or pleasure in doing things? & 2 \\\\
2. Feeling down, depressed, or hopeless? & 3 \\\\
3. Trouble falling asleep, staying asleep, or sleeping too much? & 1 \\\\
4. Feeling tired or having little energy? & 2 \\\\
5. Poor appetite or overeating? & 1 \\\\
6. Feeling bad about yourself, or that you are a failure? & 3 \\\\
7. Trouble concentrating on things? & 2 \\\\
8. Moving or speaking slowly, or being restless? & 0 \\\\
9. Thoughts of self-harm or suicide? & 1 \\\\
\\hline
\\end{tabular}

\\section*{Score and Interpretation}
\\textbf{Total Score:} 15 \\\\
\\textbf{Severity Level:} Moderately Severe Depression \\\\

\\section*{Risk \\& Urgency Assessment}
\\textbf{Self-Harm Risk:} Yes (Score ≥ 1 on Q9) \\\\
\\textbf{Urgent Intervention Needed:} No, but monitoring recommended \\\\

\\section*{Insights \\& Recommendations}
\\begin{itemize}
  \\item Moderate-to-severe depressive symptoms detected.
  \\item Self-harm risk is present; patient should be monitored.
  \\item Psychologist review is strongly recommended.
  \\item Suggested coping strategies: Mindfulness, structured daily routine, social engagement.
\\end{itemize}

\\textit{Note: This screening is not a diagnostic tool. Please consult a licensed psychologist for a full assessment.}

\\end{document}`
})

const generationConfig = {
  temperature: 0.7,
  topP: 0.95,
  topK: 64,
  maxOutputTokens: 65536,
  responseMimeType: "text/plain"
}

async function run() {
  const chatSession = model.startChat({ generationConfig })

  const result = await chatSession.sendMessage("INSERT_INPUT_HERE")
  console.log(result.response.text())
}

run()